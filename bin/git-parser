#!/usr/bin/env bash

if [ ! -d ".git" ] && ! git rev-parse --git-dir > /dev/null 2>&1; then
    exit 0
fi

source "$HOME/lib/colors.sh"

olderThanMinutes() {
    local MATCHES
    local FIND_EXIT_CODE

    if [[ -z "$FIND_COMAND" ]]; then
        if command -v gfin > /dev/null; then
            FIND_COMMAND=gfind
        else
            FIND_COMMAND=find
        fi
    fi

    MATCHES=$("$FIND_COMMAND" "$1" -mmin +"$2" 2> /dev/null)
    FIND_EXIT_CODE=$?
    if [[ -n "$MATCHES" ]]; then
        return 0
    else
        return 1
    fi
}

checkUpstream() {
    local REPO=$(git rev-parse --show-toplevel 2> /dev/null)
    local GIT_PROMPT_FETCH_TIMEOUT="5"
    local FETCH_HEAD="$REPO/.git/FETCH_HEAD"
    # Fetch repo if local is stale for more than $GIT_FETCH_TIMEOUT minutes
    if [[ ! -e "$FETCH_HEAD" ]] || olderThanMinutes "$FETCH_HEAD" "$GIT_PROMPT_FETCH_TIMEOUT"
    then
        if [[ -n $(git remote show) ]]; then
            # Runs git fetch quietly in the background
            (git fetch --quiet &> /dev/null & disown -h)
        fi
    fi
}

replaceSymbols() {
    set -f

    local VALUE=${1//_AHEAD_/${TEAL}↑}
    local VALUE1=${VALUE//_BEHIND_/${GOLD}↓}
    local VALUE2=${VALUE1//_NO_REMOTE_TRACKING_/${BM}L}

    echo ${VALUE2//_PREHASH_/:}

    set +f
}

checkUpstream

declare -a git_status_fields=($($HOME/lib/gitstatus 2>/dev/null))

GIT_BRANCH=$(replaceSymbols "${git_status_fields[0]}")
GIT_REMOTE="$(replaceSymbols "${git_status_fields[1]}")"
GIT_UPSTREAM_PRIVATE=${git_status_fields[2]}
GIT_STAGED=${git_status_fields[3]}
GIT_CONFLICTS=${git_status_fields[4]}
GIT_CHANGED=${git_status_fields[5]}
GIT_UNTRACKED=${git_status_fields[6]}
GIT_STASHED=${git_status_fields[7]}
GIT_CLEAN=${git_status_fields[8]}

if [[ ${GIT_BRANCH} = "" ]]; then
    exit 0
fi

if [[ ${GIT_REMOTE} = "." ]]; then
    unset GIT_REMOTE
fi

RESULT="${PURPLE}[${GIT_BRANCH}${GIT_REMOTE}${PURPLE}|"

add_status() {
    RESULT="${RESULT}${1}"
}

if [[ ${GIT_STAGED} != 0 ]]; then
    add_status "${Y}•${GIT_STAGED}"
fi

if [[ ${GIT_CONFLICTS} != 0 ]]; then
    add_status "${R}×${GIT_CONFLICTS}"
fi

if [[ ${GIT_CHANGED} != 0 ]]; then
    add_status "${U}₊${GIT_CHANGED}"
fi

if [[ ${GIT_UNTRACKED} != 0 ]]; then
    add_status "${C}…${GIT_UNTRACKED}"
fi

if [[ ${GIT_STASHED} != 0 ]]; then
    add_status "${BU}⚑ ${GIT_STASHED}"
fi

if [[ ${GIT_CLEAN} = 1 ]]; then
    add_status "${G}✓"
fi

RESULT="${RESULT}${PURPLE}]"

echo "${RESULT}${RESET}"

